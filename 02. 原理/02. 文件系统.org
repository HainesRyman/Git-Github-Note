* 文件系统
** 文件系统的结构
    本地仓库：
        主分支main(原为master)：
            工作区
            暂存区
            仓库区
        其他分支：
            工作区
            暂存区
            仓库区
    远程仓库：
        主分支main(原为master)：
            工作区
            暂存区
            仓库区
        其他分支：
            工作区
            暂存区
            仓库区
文件系统的协作示意图 ![](../_images/文件系统的协作示意图.png)
** 仓库
** 分支(branch)
    功能：
        每个员工开发期的代码互不干扰，并行开发，则每人使用一条分支
    常见分支：
        公有分支：
            main(原为master)：
                用于发布的默认主分支
                分支main的代码一般表示项目的最终结果，即经过测试的稳定的代码
            dev：
                开发阶段的分支，开发完成后被合并到分支main
                习惯上，开发过程中的代码应存放在分支dev上
        私有分支：
            成员各自的专人专用的分支：
                每个项目成员的个人分支，如此实现各成员的开发工作互相不冲突
** 分区
    工作区 = working directory：
        功能：
            添加、修改、删除文件的操作，都发生在工作区中
        位置：
            Git 仓库文件夹中的 ~~.git/~~ 文件夹以外的部分
    暂存区 = stage = index ：
        功能：
            将工作区中的操作完成小阶段的存储
        位置：
            Git 仓库文件夹中的 ~~.git/~~ 文件夹中的 ~~.index~~ 文件
    版本库区 = repository：
        功能：
            表示个人开发的一个小阶段的完成，其中记录的各版本可以查看并回退
            所有有关此项目的快照数据都存放在这里
        位置：
            Git 仓库文件夹中的 ~~.git/~~ 文件夹
        历史版本：
            ``HEAD``       表示 当前版本 = 最近一次提交版本
            ``HEAD^``      表示 上一个版本
            ``HEAD^^``     表示 再上一个版本
            ``HEAD~数字N`` 表示 往前第N个版本
                例如：``HEAD~100`` 表示 往前第100个版本
分区交互：
    工作区与暂存区交互的方式及命令 ![](../_images/工作区与暂存区交互的方式及命令.png)
    暂存区与仓库区交互的方式及命令 ![](../_images/暂存区与仓库区交互的方式及命令.png)
    本地仓库与远程仓库的交互关系 ![](../_images/本地仓库与远程仓库的交互关系.png)

